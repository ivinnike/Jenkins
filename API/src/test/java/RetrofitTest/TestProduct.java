package RetrofitTest;import Lesson5and6.Product;import Lesson5and6.RetrofitUtils;import Lesson5and6.ServiceProduct;import com.github.javafaker.Faker;import lombok.SneakyThrows;import okhttp3.ResponseBody;import org.hamcrest.CoreMatchers;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import retrofit2.Response;import static org.hamcrest.MatcherAssert.assertThat;public class TestProduct {    static ServiceProduct serviceProduct;    Product product;    Faker faker = new Faker();    int id;    String title;    @BeforeAll    static void beforeAll(){    serviceProduct = RetrofitUtils.getRetrofit()            .create(ServiceProduct.class);}    @BeforeEach    void setUp(){        product = new Product()                .withTitle(faker.food().ingredient())                .withCategoryTitle("Food")                .withPrice((int) (Math.random() *1000));    }    @Test    @SneakyThrows    void  getProduct(){        Response<Product> response = serviceProduct.createProduct(product).execute();        id = response.body().getId();        assertThat(response.isSuccessful(), CoreMatchers.is(true));}    @Test    @SneakyThrows    void  postProduct(){        Response<Product> response = serviceProduct.createProduct(product).execute();        title = response.body().getTitle();        assertThat(response.isSuccessful(), CoreMatchers.is(true));    }    @Test    @SneakyThrows    void  putProduct(){        Response<Product> response = serviceProduct.createProduct(product).execute();        title = response.body().getTitle();        assertThat(response.isSuccessful(), CoreMatchers.is(true));    }    @Test    @SneakyThrows    void  getreturnsProduct(){        Response<Product> response = serviceProduct.createProduct(product).execute();        assertThat(response.isSuccessful(), CoreMatchers.is(true));    }   @AfterEach    @SneakyThrows    void deleteProduct(){        Response<ResponseBody> response = serviceProduct.deleteProduct(id).execute();        assertThat(response.isSuccessful(),CoreMatchers.is(true));}}